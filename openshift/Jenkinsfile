// Jenkinsfile for Inject
// @See https://akomljen.com/set-up-a-jenkins-ci-cd-pipeline-with-kubernetes/

pipeline {
  agent {
    kubernetes {
      cloud "openshift"
      label 'jenkins-pod'
//      inheritFrom "maven"
      containerTemplate {
        name 'jnlp'
        image "logimethods/jenkins-slave-sbt:1.2.7"
//        resourceRequestMemory '1Gi'
//        resourceLimitMemory '2Gi'
      }
    }
  }
//  options { retry(3) }
  stages {
    stage('SBT Build') {
      parallel {
        stage('SBT Inject Build') {
          steps {
            container('jnlp') {
              dir('inject') {
                sh "sbt clean assembly dockerFileTask"
              }
            }
          }
        }
        stage('SBT App Build') {
          steps {
            container('jnlp') {
              dir('app') {
                sh "sbt clean assembly dockerFileTask"
              }
            }
          }
        }
        stage('SBT Monitor Build') {
          steps {
            container('jnlp') {
              dir('monitor') {
                sh "sbt clean assembly dockerFileTask"
              }
            }
          }
        }
      }
    }
    stage('Build and Tag Inject Image') {
      steps {
        container('jnlp') {
          dir('inject/target/docker') {
            echo "Building OpenShift container image"
            sh "ls -als"
            // Start Binary Build in OpenShift using the file we just published
            // The filename is parksmap.jar in the 'target' directory of your current
            // Jenkins workspace
            sh "oc start-build nats-connector-inject --from-dir . --follow"
            // Tag the image using the devTag
            // openshiftTag alias: 'false', destStream: 'parksmap', destTag: "${devTag}", destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'parksmap', srcTag: 'latest', verbose: 'false'
          }
        }
      }
    }
  }
}
